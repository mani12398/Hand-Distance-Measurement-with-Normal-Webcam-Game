import cv2
import numpy as np
import math
import random
import time
import cvzone  # Assuming cvzone library is used for text display
from cvzone.HandTrackingModule import HandDetector


def game():
    # Setting up webcam
    cap = cv2.VideoCapture(0)  # Assuming 0 is the webcam number
    cap.set(3, 1600)  # Setting capture width
    cap.set(4, 720)  # Setting capture height

    # Hand-Detector
    detector = HandDetector(detectionCon=0.8, maxHands=1)  # Assuming HandDetector is defined elsewhere

    # Mapping distance in pixels to distance in centimeters
    x = [300, 245, 200, 170, 145, 130, 112, 103, 93, 87, 80, 75, 70, 67, 62, 59, 57]
    y = [20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 78, 80, 85, 90, 95, 100]
    coff = np.polyfit(x, y, 2)  # Polynomial fit for conversion from pixels to cm

    # Game Variables
    cx, cy = 250, 250  # Initial button position
    color = (255, 0, 255)  # Initial button color
    counter = 0
    score = 0
    timeStart = time.time()
    totalTime = 20

    # Main game loop
    while True:
        success, img = cap.read()
        img = cv2.flip(img, 1)

        # Checking if game time is within the limit
        if time.time() - timeStart < totalTime:
            hands, img = detector.findHands(img)  # Detecting hands in the frame

            if hands and len(hands) > 0:
                lmList = hands[0]['lmList']
                x, y, w, h = hands[0]['bbox']
                x1, y1, z1 = lmList[5]  # Assuming hand landmarks are being used for calculations
                x2, y2, z2 = lmList[17]

                # Calculating Euclidean Distance and converting to cm
                distance = int(math.sqrt((y2 - y1) ** 2 + (x2 - x1) ** 2 + (z2 - z1) ** 2))
                A, B, C = coff
                distanceCM = A * distance ** 2 + B * distance + C

                # Checking if the hand is close enough to the button
                if distanceCM < 40:
                    if x < cx < x + w and y < cy < y + h:
                        counter = 1

                cvzone.putTextRect(img, f'{int(distanceCM)} cm', (x + 70, y - 30))  # Displaying distance on screen

            # Handling button click
            if counter:
                counter += 1
                color = (0, 255, 0)
                if counter == 3:  # Change button position and update score
                    cx = random.randint(100, 1100)
                    cy = random.randint(100, 600)
                    color = (255, 0, 255)
                    score += 1
                    counter = 0

            # Drawing the button
            cv2.circle(img, (cx, cy), 30, color, cv2.FILLED)
            cv2.circle(img, (cx, cy), 10, (255, 255, 255), cv2.FILLED)
            cv2.circle(img, (cx, cy), 20, (255, 255, 255), 2)
            cv2.circle(img, (cx, cy), 30, (50, 50, 50), 2)

            # Displaying game HUD
            cvzone.putTextRect(img, f'Time: {int(totalTime - (time.time() - timeStart))}', (1000, 75), scale=3,
                               offset=20)
            cvzone.putTextRect(img, f'Score: {str(score).zfill(2)}', (60, 75), scale=3, offset=20)
        else:  # Game over scenario
            cvzone.putTextRect(img, 'Game Over', (400, 400), scale=5, offset=30, thickness=7)
            cvzone.putTextRect(img, f'Your Score: {score}', (450, 500), scale=3, offset=20)
            cvzone.putTextRect(img, 'Press R to Restart', (460, 575), scale=2, offset=10)
            cvzone.putTextRect(img, 'Press E to Exit', (480, 700), scale=2, offset=15, thickness=3)
        cv2.imshow("Image", img)
        key = cv2.waitKey(1)
        if key == ord('r'):  # Restarting the game
            timeStart = time.time()
            score = 0
        if key == ord('e'):  # Press 'g' to exit the loop
            break
